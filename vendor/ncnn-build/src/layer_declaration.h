// Layer Declaration header
//
// This file is auto-generated by cmake, don't edit it.

#include "layer/concat.h"
#include "layer/x86/concat_x86.h"
namespace ncnn {
class Concat_final : virtual public Concat, virtual public Concat_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/x86/concat_x86_avx512.h"
namespace ncnn {
class Concat_final_avx512 : virtual public Concat, virtual public Concat_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final_avx512)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/x86/concat_x86_fma.h"
namespace ncnn {
class Concat_final_fma : virtual public Concat, virtual public Concat_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final_fma)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/x86/concat_x86_avx.h"
namespace ncnn {
class Concat_final_avx : virtual public Concat, virtual public Concat_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final_avx)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/x86/convolution_x86.h"
namespace ncnn {
class Convolution_final : virtual public Convolution, virtual public Convolution_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/x86/convolution_x86_avx512.h"
namespace ncnn {
class Convolution_final_avx512 : virtual public Convolution, virtual public Convolution_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final_avx512)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/x86/convolution_x86_fma.h"
namespace ncnn {
class Convolution_final_fma : virtual public Convolution, virtual public Convolution_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final_fma)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/x86/convolution_x86_avx.h"
namespace ncnn {
class Convolution_final_avx : virtual public Convolution, virtual public Convolution_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final_avx)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/x86/crop_x86.h"
namespace ncnn {
class Crop_final : virtual public Crop, virtual public Crop_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/x86/crop_x86_avx512.h"
namespace ncnn {
class Crop_final_avx512 : virtual public Crop, virtual public Crop_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final_avx512)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/x86/crop_x86_fma.h"
namespace ncnn {
class Crop_final_fma : virtual public Crop, virtual public Crop_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final_fma)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/x86/crop_x86_avx.h"
namespace ncnn {
class Crop_final_avx : virtual public Crop, virtual public Crop_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final_avx)
} // namespace ncnn

#include "layer/dropout.h"
#include "layer/x86/dropout_x86.h"
namespace ncnn {
class Dropout_final : virtual public Dropout, virtual public Dropout_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dropout::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dropout_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dropout_final)
} // namespace ncnn

#include "layer/dropout.h"
#include "layer/x86/dropout_x86_avx512.h"
namespace ncnn {
class Dropout_final_avx512 : virtual public Dropout, virtual public Dropout_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dropout::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dropout_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dropout_final_avx512)
} // namespace ncnn

#include "layer/dropout.h"
#include "layer/x86/dropout_x86_fma.h"
namespace ncnn {
class Dropout_final_fma : virtual public Dropout, virtual public Dropout_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dropout::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dropout_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dropout_final_fma)
} // namespace ncnn

#include "layer/dropout.h"
#include "layer/x86/dropout_x86_avx.h"
namespace ncnn {
class Dropout_final_avx : virtual public Dropout, virtual public Dropout_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dropout::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dropout_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dropout_final_avx)
} // namespace ncnn

#include "layer/embed.h"
namespace ncnn {
class Embed_final : virtual public Embed
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Embed::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Embed::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Embed_final)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/x86/flatten_x86.h"
namespace ncnn {
class Flatten_final : virtual public Flatten, virtual public Flatten_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/x86/flatten_x86_avx512.h"
namespace ncnn {
class Flatten_final_avx512 : virtual public Flatten, virtual public Flatten_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final_avx512)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/x86/flatten_x86_fma.h"
namespace ncnn {
class Flatten_final_fma : virtual public Flatten, virtual public Flatten_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final_fma)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/x86/flatten_x86_avx.h"
namespace ncnn {
class Flatten_final_avx : virtual public Flatten, virtual public Flatten_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final_avx)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/x86/innerproduct_x86.h"
namespace ncnn {
class InnerProduct_final : virtual public InnerProduct, virtual public InnerProduct_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/x86/innerproduct_x86_avx512.h"
namespace ncnn {
class InnerProduct_final_avx512 : virtual public InnerProduct, virtual public InnerProduct_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final_avx512)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/x86/innerproduct_x86_fma.h"
namespace ncnn {
class InnerProduct_final_fma : virtual public InnerProduct, virtual public InnerProduct_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final_fma)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/x86/innerproduct_x86_avx.h"
namespace ncnn {
class InnerProduct_final_avx : virtual public InnerProduct, virtual public InnerProduct_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final_avx)
} // namespace ncnn

#include "layer/input.h"
namespace ncnn {
class Input_final : virtual public Input
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Input::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Input::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Input_final)
} // namespace ncnn

#include "layer/memorydata.h"
namespace ncnn {
class MemoryData_final : virtual public MemoryData
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MemoryData::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MemoryData::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MemoryData_final)
} // namespace ncnn

#include "layer/reduction.h"
namespace ncnn {
class Reduction_final : virtual public Reduction
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reduction::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reduction::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reduction_final)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/x86/relu_x86.h"
namespace ncnn {
class ReLU_final : virtual public ReLU, virtual public ReLU_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/x86/relu_x86_avx512.h"
namespace ncnn {
class ReLU_final_avx512 : virtual public ReLU, virtual public ReLU_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final_avx512)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/x86/relu_x86_fma.h"
namespace ncnn {
class ReLU_final_fma : virtual public ReLU, virtual public ReLU_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final_fma)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/x86/relu_x86_avx.h"
namespace ncnn {
class ReLU_final_avx : virtual public ReLU, virtual public ReLU_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final_avx)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/x86/reshape_x86.h"
namespace ncnn {
class Reshape_final : virtual public Reshape, virtual public Reshape_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/x86/reshape_x86_avx512.h"
namespace ncnn {
class Reshape_final_avx512 : virtual public Reshape, virtual public Reshape_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final_avx512)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/x86/reshape_x86_fma.h"
namespace ncnn {
class Reshape_final_fma : virtual public Reshape, virtual public Reshape_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final_fma)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/x86/reshape_x86_avx.h"
namespace ncnn {
class Reshape_final_avx : virtual public Reshape, virtual public Reshape_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final_avx)
} // namespace ncnn

#include "layer/sigmoid.h"
#include "layer/x86/sigmoid_x86.h"
namespace ncnn {
class Sigmoid_final : virtual public Sigmoid, virtual public Sigmoid_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Sigmoid::create_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Sigmoid_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Sigmoid_final)
} // namespace ncnn

#include "layer/sigmoid.h"
#include "layer/x86/sigmoid_x86_avx512.h"
namespace ncnn {
class Sigmoid_final_avx512 : virtual public Sigmoid, virtual public Sigmoid_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Sigmoid::create_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Sigmoid_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Sigmoid_final_avx512)
} // namespace ncnn

#include "layer/sigmoid.h"
#include "layer/x86/sigmoid_x86_fma.h"
namespace ncnn {
class Sigmoid_final_fma : virtual public Sigmoid, virtual public Sigmoid_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Sigmoid::create_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Sigmoid_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Sigmoid_final_fma)
} // namespace ncnn

#include "layer/sigmoid.h"
#include "layer/x86/sigmoid_x86_avx.h"
namespace ncnn {
class Sigmoid_final_avx : virtual public Sigmoid, virtual public Sigmoid_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Sigmoid::create_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Sigmoid_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Sigmoid_final_avx)
} // namespace ncnn

#include "layer/slice.h"
#include "layer/x86/slice_x86.h"
namespace ncnn {
class Slice_final : virtual public Slice, virtual public Slice_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Slice::create_pipeline(opt); if (ret) return ret; }
        { int ret = Slice_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Slice_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Slice::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Slice_final)
} // namespace ncnn

#include "layer/slice.h"
#include "layer/x86/slice_x86_avx512.h"
namespace ncnn {
class Slice_final_avx512 : virtual public Slice, virtual public Slice_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Slice::create_pipeline(opt); if (ret) return ret; }
        { int ret = Slice_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Slice_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Slice::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Slice_final_avx512)
} // namespace ncnn

#include "layer/slice.h"
#include "layer/x86/slice_x86_fma.h"
namespace ncnn {
class Slice_final_fma : virtual public Slice, virtual public Slice_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Slice::create_pipeline(opt); if (ret) return ret; }
        { int ret = Slice_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Slice_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Slice::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Slice_final_fma)
} // namespace ncnn

#include "layer/slice.h"
#include "layer/x86/slice_x86_avx.h"
namespace ncnn {
class Slice_final_avx : virtual public Slice, virtual public Slice_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Slice::create_pipeline(opt); if (ret) return ret; }
        { int ret = Slice_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Slice_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Slice::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Slice_final_avx)
} // namespace ncnn

#include "layer/softmax.h"
#include "layer/x86/softmax_x86.h"
namespace ncnn {
class Softmax_final : virtual public Softmax, virtual public Softmax_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Softmax::create_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Softmax_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Softmax_final)
} // namespace ncnn

#include "layer/softmax.h"
#include "layer/x86/softmax_x86_avx512.h"
namespace ncnn {
class Softmax_final_avx512 : virtual public Softmax, virtual public Softmax_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Softmax::create_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Softmax_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Softmax_final_avx512)
} // namespace ncnn

#include "layer/softmax.h"
#include "layer/x86/softmax_x86_fma.h"
namespace ncnn {
class Softmax_final_fma : virtual public Softmax, virtual public Softmax_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Softmax::create_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Softmax_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Softmax_final_fma)
} // namespace ncnn

#include "layer/softmax.h"
#include "layer/x86/softmax_x86_avx.h"
namespace ncnn {
class Softmax_final_avx : virtual public Softmax, virtual public Softmax_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Softmax::create_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Softmax_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Softmax_final_avx)
} // namespace ncnn

#include "layer/split.h"
namespace ncnn {
class Split_final : virtual public Split
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Split::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Split::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Split_final)
} // namespace ncnn

#include "layer/tanh.h"
#include "layer/x86/tanh_x86.h"
namespace ncnn {
class TanH_final : virtual public TanH, virtual public TanH_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = TanH::create_pipeline(opt); if (ret) return ret; }
        { int ret = TanH_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = TanH_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = TanH::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(TanH_final)
} // namespace ncnn

#include "layer/tanh.h"
#include "layer/x86/tanh_x86_avx512.h"
namespace ncnn {
class TanH_final_avx512 : virtual public TanH, virtual public TanH_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = TanH::create_pipeline(opt); if (ret) return ret; }
        { int ret = TanH_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = TanH_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = TanH::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(TanH_final_avx512)
} // namespace ncnn

#include "layer/tanh.h"
#include "layer/x86/tanh_x86_fma.h"
namespace ncnn {
class TanH_final_fma : virtual public TanH, virtual public TanH_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = TanH::create_pipeline(opt); if (ret) return ret; }
        { int ret = TanH_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = TanH_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = TanH::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(TanH_final_fma)
} // namespace ncnn

#include "layer/tanh.h"
#include "layer/x86/tanh_x86_avx.h"
namespace ncnn {
class TanH_final_avx : virtual public TanH, virtual public TanH_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = TanH::create_pipeline(opt); if (ret) return ret; }
        { int ret = TanH_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = TanH_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = TanH::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(TanH_final_avx)
} // namespace ncnn

#include "layer/rnn.h"
namespace ncnn {
class RNN_final : virtual public RNN
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = RNN::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = RNN::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(RNN_final)
} // namespace ncnn

#include "layer/lstm.h"
#include "layer/x86/lstm_x86.h"
namespace ncnn {
class LSTM_final : virtual public LSTM, virtual public LSTM_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = LSTM::create_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = LSTM_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(LSTM_final)
} // namespace ncnn

#include "layer/lstm.h"
#include "layer/x86/lstm_x86_avx512.h"
namespace ncnn {
class LSTM_final_avx512 : virtual public LSTM, virtual public LSTM_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = LSTM::create_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = LSTM_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(LSTM_final_avx512)
} // namespace ncnn

#include "layer/lstm.h"
#include "layer/x86/lstm_x86_fma.h"
namespace ncnn {
class LSTM_final_fma : virtual public LSTM, virtual public LSTM_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = LSTM::create_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = LSTM_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(LSTM_final_fma)
} // namespace ncnn

#include "layer/lstm.h"
#include "layer/x86/lstm_x86_avx.h"
namespace ncnn {
class LSTM_final_avx : virtual public LSTM, virtual public LSTM_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = LSTM::create_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = LSTM_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = LSTM::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(LSTM_final_avx)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/x86/binaryop_x86.h"
namespace ncnn {
class BinaryOp_final : virtual public BinaryOp, virtual public BinaryOp_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/x86/binaryop_x86_avx512.h"
namespace ncnn {
class BinaryOp_final_avx512 : virtual public BinaryOp, virtual public BinaryOp_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final_avx512)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/x86/binaryop_x86_fma.h"
namespace ncnn {
class BinaryOp_final_fma : virtual public BinaryOp, virtual public BinaryOp_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final_fma)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/x86/binaryop_x86_avx.h"
namespace ncnn {
class BinaryOp_final_avx : virtual public BinaryOp, virtual public BinaryOp_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final_avx)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/x86/unaryop_x86.h"
namespace ncnn {
class UnaryOp_final : virtual public UnaryOp, virtual public UnaryOp_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/x86/unaryop_x86_avx512.h"
namespace ncnn {
class UnaryOp_final_avx512 : virtual public UnaryOp, virtual public UnaryOp_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final_avx512)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/x86/unaryop_x86_fma.h"
namespace ncnn {
class UnaryOp_final_fma : virtual public UnaryOp, virtual public UnaryOp_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final_fma)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/x86/unaryop_x86_avx.h"
namespace ncnn {
class UnaryOp_final_avx : virtual public UnaryOp, virtual public UnaryOp_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final_avx)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/x86/padding_x86.h"
namespace ncnn {
class Padding_final : virtual public Padding, virtual public Padding_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/x86/padding_x86_avx512.h"
namespace ncnn {
class Padding_final_avx512 : virtual public Padding, virtual public Padding_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final_avx512)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/x86/padding_x86_fma.h"
namespace ncnn {
class Padding_final_fma : virtual public Padding, virtual public Padding_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final_fma)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/x86/padding_x86_avx.h"
namespace ncnn {
class Padding_final_avx : virtual public Padding, virtual public Padding_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final_avx)
} // namespace ncnn

#include "layer/expanddims.h"
namespace ncnn {
class ExpandDims_final : virtual public ExpandDims
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ExpandDims::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ExpandDims::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ExpandDims_final)
} // namespace ncnn

#include "layer/permute.h"
namespace ncnn {
class Permute_final : virtual public Permute
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Permute::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Permute::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Permute_final)
} // namespace ncnn

#include "layer/quantize.h"
#include "layer/x86/quantize_x86.h"
namespace ncnn {
class Quantize_final : virtual public Quantize, virtual public Quantize_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Quantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Quantize_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Quantize_final)
} // namespace ncnn

#include "layer/quantize.h"
#include "layer/x86/quantize_x86_avx512.h"
namespace ncnn {
class Quantize_final_avx512 : virtual public Quantize, virtual public Quantize_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Quantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Quantize_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Quantize_final_avx512)
} // namespace ncnn

#include "layer/quantize.h"
#include "layer/x86/quantize_x86_fma.h"
namespace ncnn {
class Quantize_final_fma : virtual public Quantize, virtual public Quantize_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Quantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Quantize_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Quantize_final_fma)
} // namespace ncnn

#include "layer/quantize.h"
#include "layer/x86/quantize_x86_avx.h"
namespace ncnn {
class Quantize_final_avx : virtual public Quantize, virtual public Quantize_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Quantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Quantize_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Quantize_final_avx)
} // namespace ncnn

#include "layer/dequantize.h"
#include "layer/x86/dequantize_x86.h"
namespace ncnn {
class Dequantize_final : virtual public Dequantize, virtual public Dequantize_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dequantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dequantize_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dequantize_final)
} // namespace ncnn

#include "layer/dequantize.h"
#include "layer/x86/dequantize_x86_avx512.h"
namespace ncnn {
class Dequantize_final_avx512 : virtual public Dequantize, virtual public Dequantize_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dequantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dequantize_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dequantize_final_avx512)
} // namespace ncnn

#include "layer/dequantize.h"
#include "layer/x86/dequantize_x86_fma.h"
namespace ncnn {
class Dequantize_final_fma : virtual public Dequantize, virtual public Dequantize_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dequantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dequantize_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dequantize_final_fma)
} // namespace ncnn

#include "layer/dequantize.h"
#include "layer/x86/dequantize_x86_avx.h"
namespace ncnn {
class Dequantize_final_avx : virtual public Dequantize, virtual public Dequantize_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dequantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dequantize_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dequantize_final_avx)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/x86/packing_x86.h"
namespace ncnn {
class Packing_final : virtual public Packing, virtual public Packing_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/x86/packing_x86_avx512.h"
namespace ncnn {
class Packing_final_avx512 : virtual public Packing, virtual public Packing_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final_avx512)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/x86/packing_x86_fma.h"
namespace ncnn {
class Packing_final_fma : virtual public Packing, virtual public Packing_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final_fma)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/x86/packing_x86_avx.h"
namespace ncnn {
class Packing_final_avx : virtual public Packing, virtual public Packing_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final_avx)
} // namespace ncnn

#include "layer/requantize.h"
#include "layer/x86/requantize_x86.h"
namespace ncnn {
class Requantize_final : virtual public Requantize, virtual public Requantize_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Requantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Requantize_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Requantize_final)
} // namespace ncnn

#include "layer/requantize.h"
#include "layer/x86/requantize_x86_avx512.h"
namespace ncnn {
class Requantize_final_avx512 : virtual public Requantize, virtual public Requantize_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Requantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Requantize_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Requantize_final_avx512)
} // namespace ncnn

#include "layer/requantize.h"
#include "layer/x86/requantize_x86_fma.h"
namespace ncnn {
class Requantize_final_fma : virtual public Requantize, virtual public Requantize_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Requantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Requantize_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Requantize_final_fma)
} // namespace ncnn

#include "layer/requantize.h"
#include "layer/x86/requantize_x86_avx.h"
namespace ncnn {
class Requantize_final_avx : virtual public Requantize, virtual public Requantize_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Requantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Requantize_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Requantize_final_avx)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/x86/cast_x86.h"
namespace ncnn {
class Cast_final : virtual public Cast, virtual public Cast_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/x86/cast_x86_avx512.h"
namespace ncnn {
class Cast_final_avx512 : virtual public Cast, virtual public Cast_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final_avx512)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/x86/cast_x86_fma.h"
namespace ncnn {
class Cast_final_fma : virtual public Cast, virtual public Cast_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final_fma)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/x86/cast_x86_avx.h"
namespace ncnn {
class Cast_final_avx : virtual public Cast, virtual public Cast_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final_avx)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/x86/gemm_x86.h"
namespace ncnn {
class Gemm_final : virtual public Gemm, virtual public Gemm_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/x86/gemm_x86_avx512.h"
namespace ncnn {
class Gemm_final_avx512 : virtual public Gemm, virtual public Gemm_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final_avx512)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/x86/gemm_x86_fma.h"
namespace ncnn {
class Gemm_final_fma : virtual public Gemm, virtual public Gemm_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final_fma)
} // namespace ncnn

#include "layer/gemm.h"
#include "layer/x86/gemm_x86_avx.h"
namespace ncnn {
class Gemm_final_avx : virtual public Gemm, virtual public Gemm_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Gemm::create_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Gemm_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Gemm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Gemm_final_avx)
} // namespace ncnn

#include "layer/convolution1d.h"
#include "layer/x86/convolution1d_x86.h"
namespace ncnn {
class Convolution1D_final : virtual public Convolution1D, virtual public Convolution1D_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution1D::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution1D_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution1D_final)
} // namespace ncnn

#include "layer/convolution1d.h"
#include "layer/x86/convolution1d_x86_avx512.h"
namespace ncnn {
class Convolution1D_final_avx512 : virtual public Convolution1D, virtual public Convolution1D_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution1D::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution1D_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution1D_final_avx512)
} // namespace ncnn

#include "layer/convolution1d.h"
#include "layer/x86/convolution1d_x86_fma.h"
namespace ncnn {
class Convolution1D_final_fma : virtual public Convolution1D, virtual public Convolution1D_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution1D::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution1D_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution1D_final_fma)
} // namespace ncnn

#include "layer/convolution1d.h"
#include "layer/x86/convolution1d_x86_avx.h"
namespace ncnn {
class Convolution1D_final_avx : virtual public Convolution1D, virtual public Convolution1D_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution1D::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution1D_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution1D::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution1D_final_avx)
} // namespace ncnn

#include "layer/convolutiondepthwise1d.h"
namespace ncnn {
class ConvolutionDepthWise1D_final : virtual public ConvolutionDepthWise1D
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ConvolutionDepthWise1D::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ConvolutionDepthWise1D::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ConvolutionDepthWise1D_final)
} // namespace ncnn

#include "layer/matmul.h"
#include "layer/x86/matmul_x86.h"
namespace ncnn {
class MatMul_final : virtual public MatMul, virtual public MatMul_x86
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MatMul::create_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul_x86::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MatMul_x86::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MatMul_final)
} // namespace ncnn

#include "layer/matmul.h"
#include "layer/x86/matmul_x86_avx512.h"
namespace ncnn {
class MatMul_final_avx512 : virtual public MatMul, virtual public MatMul_x86_avx512
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MatMul::create_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul_x86_avx512::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MatMul_x86_avx512::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MatMul_final_avx512)
} // namespace ncnn

#include "layer/matmul.h"
#include "layer/x86/matmul_x86_fma.h"
namespace ncnn {
class MatMul_final_fma : virtual public MatMul, virtual public MatMul_x86_fma
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MatMul::create_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul_x86_fma::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MatMul_x86_fma::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MatMul_final_fma)
} // namespace ncnn

#include "layer/matmul.h"
#include "layer/x86/matmul_x86_avx.h"
namespace ncnn {
class MatMul_final_avx : virtual public MatMul, virtual public MatMul_x86_avx
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MatMul::create_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul_x86_avx::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MatMul_x86_avx::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = MatMul::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MatMul_final_avx)
} // namespace ncnn

#include "layer/deconvolutiondepthwise1d.h"
namespace ncnn {
class DeconvolutionDepthWise1D_final : virtual public DeconvolutionDepthWise1D
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = DeconvolutionDepthWise1D::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = DeconvolutionDepthWise1D::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(DeconvolutionDepthWise1D_final)
} // namespace ncnn

#include "layer/glu.h"
namespace ncnn {
class GLU_final : virtual public GLU
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = GLU::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = GLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(GLU_final)
} // namespace ncnn


